let nodeColorInactive = "#81D4FA";
let nodeColorActive = "#90EE90";
let bgColor = "#F5F5F5";
let arrowColor = "#212121";
let movingPointColor = "#E53935";

let point = {x: 75.45790111471004, y: 425.7866622887589};
let rpoint = 10;
let t = 0;

let randomLine;
let usedLines = [];

let selected = false;

const nodes = [ [75.45790111471004, 425.7866622887589, 80, 80],     //A
                [94.29527586731413, 653.2839461942569, 80, 80],     //B
                [157.85338807978462, 70.71642044301154, 80, 80],    //C
                [251.3409338809477, 256.39223048771726, 80, 80],    //D
                [264.8927738939891, 501.36481449362174, 80, 80],    //E
                [458.0016869561172, 364.934086258243, 80, 80],      //F
                [466.7021153672827, 151.28515861851747, 80, 80],    //G
                [484.76231885526425, 652.9321073222969, 80, 80],    //H
                [674.1012201236267, 457.00329335534354, 80, 80],    //I
                [706.9913144989507, 654.5599323067177, 80, 80],     //J
                [774.068540349617, 144.60923810837227, 80, 80],     //K
                [874.1105464480793, 452.9766963441088, 80, 80],     //L
                [1002.8045743701226, 619.4155995486931, 80, 80],    //M
                [1017.5050207273464, 99.10812750149283, 80, 80],    //N
                [1179.4780482948831, 345.85147157260315, 80, 80],   //O
                [1214.7239370386487, 625.1613891519304, 80, 80],    //P
                [1245.3751550968755, 113.25539657884852, 80, 80],   //Q
                [1388.5079088656655, 407.2004837668221, 80, 80],    //R
                [1453.6751454712987, 209.50300610971726, 80, 80],   //S
                [1457.2870451802896, 596.5726122956189, 80, 80]];   //T


const arrows = [[75.45790111471004, 425.7866622887589, 94.29527586731413, 653.2839461942569, 60, 520],
                [75.45790111471004, 425.7866622887589, 251.3409338809477, 256.39223048771726, 130, 330],
                [75.45790111471004, 425.7866622887589, 264.8927738939891, 501.36481449362174, 150, 460],
                [251.3409338809477, 256.39223048771726, 157.85338807978462, 70.71642044301154, 170, 160],
                [251.3409338809477, 256.39223048771726, 466.7021153672827, 151.28515861851747, 340, 200],
                [251.3409338809477, 256.39223048771726, 458.0016869561172, 364.934086258243, 380, 220],
                [458.0016869561172, 364.934086258243, 484.76231885526425, 652.9321073222969, 430, 470],
                [458.0016869561172, 364.934086258243, 674.1012201236267, 457.00329335534354, 580, 400],
                [674.1012201236267, 457.00329335534354, 706.9913144989507, 654.5599323067177, 730, 570],
                [484.76231885526425, 652.9321073222969, 706.9913144989507, 654.5599323067177, 540, 680],
                [674.1012201236267, 457.00329335534354, 874.1105464480793, 452.9766963441088, 710, 390],
                [466.7021153672827, 151.28515861851747, 774.068540349617, 144.60923810837227, 650, 190],
                [874.1105464480793, 452.9766963441088, 1002.8045743701226, 619.4155995486931, 960, 520],
                [874.1105464480793, 452.9766963441088, 1179.4780482948831, 345.85147157260315, 1070, 400],
                [774.068540349617, 144.60923810837227, 1017.5050207273464, 99.10812750149283, 850, 80],
                [774.068540349617, 144.60923810837227, 1179.4780482948831, 345.85147157260315, 800, 230],
                [1002.8045743701226, 619.4155995486931, 1214.7239370386487, 625.1613891519304, 1100, 650], 
                [1214.7239370386487, 625.1613891519304, 1457.2870451802896, 596.5726122956189, 1310, 650],
                [1017.5050207273464, 99.10812750149283, 1245.3751550968755, 113.25539657884852, 1100, 50],
                [1017.5050207273464, 99.10812750149283, 1179.4780482948831, 345.85147157260315, 1150, 250],
                [94.29527586731413, 653.2839461942569, 264.8927738939891, 501.36481449362174, 220, 670],
                [264.8927738939891, 501.36481449362174, 458.0016869561172, 364.934086258243, 320, 430],
                [1179.4780482948831, 345.85147157260315, 1388.5079088656655, 407.2004837668221, 1230, 390],
                [1388.5079088656655, 407.2004837668221, 1457.2870451802896, 596.5726122956189, 1500, 500],
                [1245.3751550968755, 113.25539657884852, 1453.6751454712987, 209.50300610971726, 1380, 180],
                [1179.4780482948831, 345.85147157260315, 1453.6751454712987, 209.50300610971726, 1360, 300],
                [157.85338807978462, 70.71642044301154, 466.7021153672827, 151.28515861851747, 400, 140]];



function setup() {
    createCanvas(document.documentElement.clientWidth, document.documentElement.clientHeight); 
    background(bgColor); 

    const arrows_len = arrows.length;

    for (let i = 0; i < arrows_len; i++) {
        arrows.push([arrows[i][2], arrows[i][3], arrows[i][0], arrows[i][1], arrows[i][4], arrows[i][5]]);
    }
}
  

function draw() {
    background(bgColor); 

    fill(255, 0, 0);
    
    drawArrows(arrows);
    drawNodes(nodes);

    fill(movingPointColor);
    noStroke();
    ellipse(point.x, point.y, rpoint, rpoint);

    if (t === 0 && !selected) {
        let lines1 = arrows.filter((arrow) => { return (isApproximatelyEqual(arrow[0],point.x) && isApproximatelyEqual(arrow[1],point.y))
             && usedLines.every((other) => {return !isApproximatelyEqual(arrow[2],other[0])})});
        console.log(lines1);
        randomLine = lines1[Math.floor(Math.random() * lines1.length)];
        usedLines.push(randomLine);
        if (usedLines.length >= 2)  {
            usedLines.shift();
        }
        selected = true;
    } 
    
    if (t >= 0.5) {
        selected = false;
    }

    point.x = bezierPoint(randomLine[0], randomLine[4], randomLine[4], randomLine[2], t);
    point.y = bezierPoint(randomLine[1], randomLine[5], randomLine[5], randomLine[3], t);

    t += 0.01;

    console.log(point.x);
    console.log(point.y);

    if (t >= 1) {
        t = 0;
    }
}



function drawNodes(positions) {
    stroke(arrowColor);
    textAlign(CENTER, CENTER);
    let idx = 0;

    for (let pos of positions) {
        if (isPointInsideNode(pos)) {
            fill(nodeColorActive);
        }
        else {
            fill(nodeColorInactive);
        }
        ellipse(...pos);
        fill(0);
        textSize(60);
        text(String.fromCharCode(65 + idx), pos[0], pos[1]);
        idx++;
    }
}

function drawArrows(positions) {
    for (let pos of positions) {
        drawCurvedArrow(...pos);
    }    
}

function drawCurvedArrow(x1, y1, x2, y2, controlX, controlY) {
    push();
    noFill();
    stroke(arrowColor);
    strokeWeight(2);
    bezier(x1, y1, controlX, controlY, controlX, controlY, x2, y2);
    pop();
}

function isPointInsideNode(node) {
    let distance = dist(point.x, point.y, node[0], node[1]);
    return distance <= node[2];
}

function isApproximatelyEqual(val1, val2) {
    return Math.abs(val1 - val2) <=  40;
}